% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Miscellaneous_Functions.R
\name{enable_debug_dump}
\alias{enable_debug_dump}
\title{Expression for dumping of objects from an evaluation stack}
\usage{
enable_debug_dump(dir_out = ".", file_tag = "debug")
}
\arguments{
\item{dir_out}{A character string. The path to where the \var{RData} file is dumped.}

\item{file_tag}{A character string. Will become final part of the \var{RData} file
name.}
}
\value{
Expression.
}
\description{
Create an expression for functions 'f' to set \code{on.exit()} such that all objects
from the evaluation frame stack of function 'f' are collected and stored in a
\var{RData} file
}
\examples{
\dontrun{
f2 <- function(x, cause_error = FALSE) {
  print(match.call())
  print(environment())
  # Enable debug dumping
  on.exit(enable_debug_dump(file_tag = match.call()[[1]]), add = TRUE)
  # Add to 'on.exit'
  on.exit(print(paste("exit from", match.call()[[1]])), add = TRUE)

  res <- x + 100
  if (cause_error) stop("Create error and force debug dumping")

  # Remove debug dumping but not other 'on.exit' expressions before returning without error
  oe <- sys.on.exit()
  oe <- remove_from_onexit_expression(oe, tag = "enable_debug_dump")
  on.exit(eval(oe), add = FALSE)
  # Add to 'on.exit'
  on.exit(print(paste("exit2 from", match.call()[[1]])), add = TRUE)
  res
}

f1 <- function(x, cause_error) {
  print(paste(match.call()[[1]], x))
  print(environment())
  try(f2(x + 1, cause_error))
}

f1(0, cause_error = FALSE)
f1(0, cause_error = TRUE)
x <- new.env()
load("last.dump.f2.RData", envir = x)
ls.str(x)

# Clean up
unlink("last.dump.f2.RData")
}

}
\seealso{
\code{\link{set_options_warn_error}} with \code{debug.dump.objects = TRUE}
}
